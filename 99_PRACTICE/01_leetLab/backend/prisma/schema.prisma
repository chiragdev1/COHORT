// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum ProblemDifficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  avatar   String?
  role     UserRole @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems       Problem[]
  submissions    Submission[]
  solvedProblems SolvedProblem[]
  playlists      Playlist[]
}

model Problem {
  id          String            @id @default(uuid())
  title       String
  description String
  difficulty  ProblemDifficulty
  tags        String[]
  constraints String?
  userId      String
  hints       String?
  editorial   String?

  examples          Json
  testCases         Json
  codeSnippets      Json
  referenceSolution Json

  submissions    Submission[]
  solvedProblems SolvedProblem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProblemInPlaylist ProblemInPlaylist[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  source_code   Json
  language_id   String
  stdin         String
  stdout        String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  testCaseResults TestCaseResult[]

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model TestCaseResult {
  id              String  @id @default(uuid())
  submissionId    String
  testcase        Int
  passed          Boolean
  stdout          String?
  stderr          String?
  expected_output String
  compileOutput   String?
  status          String
  memory          String?
  time            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model SolvedProblem {
  id String @id @default(uuid())

  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model ProblemInPlaylist {
  id         String @id @default(uuid())
  playlistId String
  problemId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}

model Playlist {
  id          String @id @default(uuid())
  name        String
  description String
  userId      String

  problems ProblemInPlaylist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}
